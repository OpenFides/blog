function initUpdate(tableNames, fields, tableName) {
	var initing = true;
	var selTable = $("#selTable").select2();
	var selDB = $("#selDB").select2();
	function setTableNames(names) {
		selTable.empty();
		selTable.select2({ data: names });
	}
	function buildCallUrl(action, param) {
		var url = new URI(window.location.href);
		var pam = _.pick(url.search(true), "_s");
		pam.dest = "update";
		pam.action = action;
		_.extend(pam, param);
		url.search(pam);
		return url;
	}
	$("#selDB").change(function () {
		var u = buildCallUrl("getTableList", { db: $(this).val() });
		selDB.prop("disabled", true);
		selTable.prop("disabled", true);
		$.get(u.toString(), function (names) {
			setTableNames(names);
		}).fail(function () {
			alert("get table names error!");
		}).always(function () {
			selDB.prop("disabled", false);
			selTable.prop("disabled", false);
		});
	});
	function chkSelectChange() {
		$(this).closest("tr").find(":input").not(".chkSelect").prop("disabled", !$(this).prop("checked"));
		if ($(this).prop("checked")) {
			$(this).closest("tr").removeClass("text-muted");
		} else {
			$(this).closest("tr").addClass("text-muted");
		}
	}
	function buildField(field) {
		var list;
		if (field.List) {
			list = Papa.unparse([_.map(field.List, function (val) {
				if (val.Label)
					return val.Value + "=" + (val.Label ? val.Label : "");
				else
					return val.Value;
			})]);
		} else {
			list = "";
		}
		var tr = $($("#tmpField").html());
		tr.find(".chkSelect").attr("id", "sel" + field.Name).prop("checked", field.Checked).change(chkSelectChange);
		tr.find(".lblName").html(field.Name).attr("for", "sel" + field.Name);
		tr.find(".edtLabel").val(field.Label);
		tr.find(".edtTooltip").val(field.Tooltip);
		tr.find(".edtList").val(list);
		tr.find(".chkMust").prop("checked", field.Must).attr("id", "mt" + field.Name);
		tr.find(".lblMust").attr("for", "mt" + field.Name);
		tr.find(".chkFreeentry").prop("checked", field.Freeentry).attr("id", "fe" + field.Name);
		tr.find(".lblFreeentry").attr("for", "fe" + field.Name);
		tr.find(".chkSelect").change();
		return tr;
	}
	function setFields(fields) {
		$("#tabFields tbody").empty();
		$("#tabFields tbody").append(_.map(fields, function (val) {
			return buildField(val);
		}));
	}
	function collectionFields() {
		return _.compact($("#tabFields tbody>tr").map(function () {
			if (!$(this).find(".chkSelect").prop("checked")) {
				return null;
			}
			var listStr = $(this).find(".edtList").val();
			var list;
			if (listStr == "") {
				list = null;
			} else {
				list = _.compact(_.map(Papa.parse(listStr).data[0], function (val) {
					if (val == "") return null
					var arr = val.split("=");
					return {
						Value: arr[0],
						Label: arr.length > 1 ? arr[1] : null
					}
				}));
			}
			return {
				Name: $(this).find(".lblName").html(),
				Label: $(this).find(".edtLabel").val(),
				Tooltip: $(this).find(".edtTooltip").val(),
				Freeentry: $(this).find(".chkFreeentry").prop("checked"),
				Must: $(this).find(".chkMust").prop("checked"),
				List: list
			}
		}).get());
	}
	$("#selTable").change(function () {
		var tabName = $(this).val();
		var u = buildCallUrl("getFields", { db: $("#selDB").val(), table: $(this).val() });
		selTable.prop("disabled", true);
		$.get(u.toString(), function (names) {
			var oldFields = collectionFields() || [];
			setFields(_.map(names, function (val) {
				for (var i = 0; i < oldFields.length; i++) {
					if (oldFields[i].Name == val) {
						return _.extend(oldFields[i], { Checked: true });
					}
				}
				return {
					Name: val
				};
			}));
		}).fail(function () {
			alert("get field names error!");
		}).always(function () {
			selTable.prop("disabled", false);
		});
	});

	$("#chkAllName").change(function () {
		$("#tabFields .chkSelect").prop("checked", $(this).prop("checked")).change();
	});
	$("#chkAllFreeentry").change(function () {
		$("#tabFields .chkFreeentry:not(:disabled)").prop("checked", $(this).prop("checked")).change();
	});
	$("#chkAllMust").change(function () {
		$("#tabFields .chkMust:not(:disabled)").prop("checked", $(this).prop("checked")).change();
	});
	setTableNames(tableNames);
	setFields(_.map(fields, function (val) {
		return _.extend(val, { Checked: true });
	}));
	selTable.val(tableName).trigger("change");
	var edtAdditionSet = ace.edit("edtAdditionSet");
	edtAdditionSet.setTheme("ace/theme/chrome");
	edtAdditionSet.getSession().setMode("ace/mode/sql");	
	edtAdditionSet.getSession().setOptions({ tabSize: 4, useSoftTabs: true });
	var edtBeforeSQL = ace.edit("edtBeforeSQL");
	edtBeforeSQL.setTheme("ace/theme/chrome");
	edtBeforeSQL.getSession().setMode("ace/mode/sql");	
	edtBeforeSQL.getSession().setOptions({ tabSize: 4, useSoftTabs: true });
	/*****************************************************************/
	$("#update_param_setting").data("oncollection", function () {
		return JSON.stringify({
			DB: selDB.val(),
			TableName: selTable.val(),
			Fields: collectionFields(),
			AdditionSet: edtAdditionSet.getValue(),
			AdditionWhere: $("#txtAdditionWhere").val(),
			BeforeSQL:edtBeforeSQL.getValue()
		}, null, "\t");
	})
	initing = false;
}
