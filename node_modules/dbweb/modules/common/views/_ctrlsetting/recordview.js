
function initRecordView(columns, allColumns, uniqueField, tableNames, tableName, readonly, elementNames,
	processes,sql) {
	$(function () {
		var firstColumns = columns;
		var firstAllColumns = allColumns;
		var firstUniqueField = uniqueField;
		var AllColumns;
		function buildCallUrl(action, param) {
			var url = new URI(window.location.href);
			var pam = _.pick(url.search(true), "_s");
			pam.dest = "recordview";
			pam.action = action;
			_.extend(pam, param);
			url.search(pam);
			return url;
		}

		var selTable = $("#selTable").select2();
		var selDB = $("#selDB").select2();
		var selUniqueField = $("#selUniqueField").select2({ tags: true, tokenSeparators: [',', ' '] });
		$(".edtProcessElementName").select2();
		function setTableNames(names) {
			var oldValue = selTable.val();
			selTable.empty();
			selTable.select2({ data: names });
			selTable.val(oldValue).trigger("change");
		}
		setTableNames(tableNames);
		selTable.val(tableName).trigger("change");
		$("#selDB").change(function () {
			var u = buildCallUrl("getTableList", { db: $(this).val() });
			selDB.prop("disabled", true);
			selTable.prop("disabled", true);
			$.get(u.toString(), function (names) {
				setTableNames(names);
			}).fail(function () {
				alert("get table names error!");
			}).always(function () {
				selDB.prop("disabled", false);
				selTable.prop("disabled", false);
			});
		})
		var edtSql = ace.edit("edtSql");
		edtSql.setValue(sql,1);
		edtSql.setTheme("ace/theme/sqlserver");
		edtSql.getSession().setMode("ace/mode/sql");
		edtSql.getSession().setOptions({ tabSize: 4, useSoftTabs: true });
		if (readonly) {
			edtSql.setReadOnly(true);
		}
		function getColumnTypes() {
			return $("#tabColumnTypes tbody tr").map(function () {
				return {
					Name: $(this).find(".col-name").html(),
					Type: $(this).find(".col-type").val()
				}
			}).get();
		}
		function putColumnTypes(colTypes) {
			var tbody = $("#tabColumnTypes tbody").empty();
			for (var i = 0; i < colTypes.length; i++) {
				var tr = $("<tr>");
				tr.append($("<td>" + (i + 1) + "</td>"));
				tr.append($("<td class='col-name'>" + colTypes[i].Name + "</td>"));
				tr.append($("<td><div class='form-group'><select class='form-control col-type'>" +
					"<option value='STR'>字符串</option>" +
					"<option value='INT'>整型</option>" +
					"<option value='FLOAT'>浮点</option>" +
					"<option value='BYTEA'>二进制</option>" +
					"<option value='DATE'>日期</option>" +
					"</select></div></td>"));
				tbody.append(tr);
				tr.find(".col-type").val(colTypes[i].Type);
			}

		}
		function checkSql(rebuildTypes) {
			var up = {
				db: $("#selDB").val(),
				sql: edtSql.getValue(),
				table: selTable.val(),
				manualPage: $("#chkManualPage").prop("checked")
			};
			if (!up.sql && !up.table) {
				return;
			}
			var u = buildCallUrl("checkSql", up);
			$("#btnCheckSql").prop("disabled", true);
			$.get(u.toString(), function (result) {
				if (result.error) {
					$("#infoMessage").addClass("text-danger").removeClass("text-primary");
					$("#infoMessage").text(result.error);
				} else {
					var dspColumns;
					if (firstColumns) {
						dspColumns = firstColumns;
						firstColumns = null;
					} else {
						dspColumns = collectionColumns();
					}
					AllColumns = result.columns;
					rebindProcessAllColumns();
					setColumns(_.pluck(result.columns, "Name"), dspColumns);
					//设置字段类型
					var columnTypes;
					if (!rebuildTypes) {
						if (firstAllColumns) {
							columnTypes = firstAllColumns;
							firstAllColumns = null;
						} else {
							columnTypes = getColumnTypes();
						}
					}
					//需要组合返回的字段和之前存贮的字段，以返回的字段为准
					putColumnTypes(
						_.map(result.columns, function (val) {
							//如果找到指定名称的字段，则用找到的，否则用返回的
							return _.find(columnTypes, function (col) {
								return col.Name == val.Name;
							}) || val;
						})
					);
					$("#infoMessage").addClass("text-primary").removeClass("text-danger");
					$("#infoMessage").html("sql语句正确");
				}
			}).fail(function () {
				alert("check sql error!");
			}).always(function () {
				$("#btnCheckSql").prop("disabled", false);
			});
		}
		$("#btnCheckSql").click(function () {
			checkSql(false);
		});
		$("#btnRebuildTypes").click(function () {
			checkSql(true);
		})
		/******************Columns*************************************/
		function toSelColumn(item) {
			$(item).find(".my-handle").after('<i class="fa fa-fw fa-check field_hide"></i><i class="fa fa-fw fa-sort field_sort"></i>');
			$(".field_sort", item).click(selcolumn_sort_click);
			$(".field_hide", item).click(selcolumn_hide_click);
		}
		function toAllColumn(item) {
			$(item).find(".field_sort,.field_hide").remove();
		}

		$(".chkAllColumn").change(function () {
			$(".allcolumn .list-group-item :checkbox").prop("checked", $(this).prop("checked"));
		});
		$(".chkSelColumn").change(function () {
			$(".selcolumn .list-group-item :checkbox").prop("checked", $(this).prop("checked"));
		});
		$(".btnAllColumn").click(function () {
			var items = $(".allcolumn .list-group-item:has(:checkbox:checked)")
			items.each(function () {
				toSelColumn(this);
			});
			$(".selcolumn").append(items);
		});
		function selcolumn_sort_click() {
			if ($(this).hasClass("fa-sort")) {
				$(this).removeClass("fa-sort").addClass("fa-sort-asc");
			} else if ($(this).hasClass("fa-sort-asc")) {
				$(this).removeClass("fa-sort-asc").addClass("fa-sort-desc");
			} else {
				$(this).removeClass("fa-sort-desc").addClass("fa-sort");
			}

		}
		function selcolumn_hide_click() {
			if ($(this).hasClass("fa-ban")) {
				$(this).removeClass("fa-ban").addClass("fa-check");
			} else {
				$(this).removeClass("fa-check").addClass("fa-ban");
			}

		}
		$(".btnSelColumn").click(function () {
			var items = $(".selcolumn .list-group-item:has(:checkbox:checked)")
			items.each(function () {
				toAllColumn(this);
			});
			$(".allcolumn").append(items);
		});
		$("#colFilter").change(function () {
			$(".allcolumn li").show();
			$(".allcolumn li:not(:contains(" + $(this).val() + "))").hide();
		});
		function setColumns(columns, dspcols) {
			var oldPK;
			if (firstUniqueField) {
				oldPK = firstUniqueField;
				firstUniqueField = null;
			} else {
				oldPK = selUniqueField.val();
			}
			selUniqueField.empty();
			selUniqueField.select2({ data: columns, tags: true, tokenSeparators: [',', ' '] });
			selUniqueField.val(oldPK).trigger("change");


			//去掉dsp中名称不在columns中出现的项目
			var dspcolumns = _.filter(dspcols, function (dsp) {
				return _.contains(columns, dsp.Name);
			});
			var all = _.difference(columns, _.map(dspcolumns, function (col) {
				return col.Name;
			}));
			var ul = $(".allcolumn");
			ul.empty();
			ul.append(_.map(all, function (v) {
				return $('<li class="list-group-item"><input type="checkbox" autocomplete="off" checked'  + (readonly ?' disabled="disabled"':'') +'><i class="my-handle fa fa-fw fa-hand-o-up"></i>' + v + '</li>').data({ name: v });
			}));
			var sortTableParam = {
				group: "column", animation: 150, ghostClass: 'ghost', scroll: true, handle: ".my-handle",
				onAdd: function (/**Event*/evt) {
					toAllColumn(evt.item);
				}
			};
			if (readonly) { sortTableParam.disabled = true; }
			Sortable.create(ul[0], sortTableParam);
			ul = $(".selcolumn");
			ul.empty();
			ul.append(_.map(dspcolumns, function (v) {
				var hide = "fa-check";
				var sort = "fa-sort";
				if (v.Hidden) { hide = "fa-ban"; }
				if (v.Order == "+") { sort = "fa-sort-asc"; }
				if (v.Order == "-") { sort = "fa-sort-desc"; }
				var str = '<li class="list-group-item"><input type="checkbox" autocomplete="off" checked' + (readonly ?' disabled="disabled"':'') +'><i class="my-handle fa fa-fw fa-hand-o-up"></i><i class="fa fa-fw ' + hide + ' field_hide"></i><i class="fa fa-fw ' + sort + ' field_sort"></i>' + v.Name + '</li>';
				var el = $(str).data({ name: v.Name });
				if (!readonly) {
					$(".field_sort", el).click(selcolumn_sort_click);
					$(".field_hide", el).click(selcolumn_hide_click);
				}
				return el;
			}));
			var sortTableParam1 = {
				group: "column", animation: 150, ghostClass: 'ghost', scroll: true, handle: ".my-handle",
				onAdd: function (evt) {
					toSelColumn(evt.item);
				}
			};
			if (readonly) { sortTableParam1.disabled = true; }
			Sortable.create(ul[0], sortTableParam1);
		}
		function collectionColumns() {
			return $(".selcolumn .list-group-item").map(function () {
				return {
					Name: $(this).data("name"),
					Hidden: $(".field_hide", this).hasClass("fa-ban"),
					Order: $(".field_sort", this).hasClass("fa-sort-asc") ? "+" : ($(".field_sort", this).hasClass("fa-sort-desc") ? "-" : "")
				}
			}).get();
		}
		$("#btnCheckSql").click();
		if (readonly) { $("#btnCheckSql").prop("disabled", true); }
		/***********************process********************************/
		//生成一个处理的模板
		var processCount = 0;
		function newProcess(data) {
			processCount++;
			var r = $($("#tmpProcess").html());
			r.find(".edtProcessName").val(data.Name);
			r.find(".edtProcessElementName").select2({
				data: elementNames,
			}).val(data.ElementName).trigger("change");
			r.find(".chkProcessBindRecord").prop("checked", data.BindRecord).attr("id", "chkProcessBindRecord_" + processCount);
			r.find(".chkProcessWithSql").prop("checked", data.WithSql).attr("id", "chkProcessWithSql_" + processCount);
			r.find(".lblProcessBindRecord").attr("for", "chkProcessBindRecord_" + processCount);
			r.find(".lblProcessWithSql").attr("for", "chkProcessWithSql_" + processCount);
			r.find(".selProcessTransPath").select2({
				data: _.pluck(AllColumns, "Name"),
				tags: true,
				tokenSeparators: [',', ' ']
			}).val(data.TransPath).trigger("change");
			r.find(".selProcessTransPath").data("trans-path", data.TransPath);
			r.find(".edtProcessTransQuery").val(data.TransQuery);
			r.find(".edtProcessVisable").val(data.Visable);
			r.find(".btnProcessAdd").click(btnProcessAddClick);
			r.find(".btnProcessRemove").click(btnProcessRemoveClick);
			r.find(".btnProcessUp").click(btnProcessUpClick);
			r.find(".btnProcessDown").click(btnProcessDownClick);

			return r;
		}
		function collectionProcess(li) {
			if (li.find(".edtProcessName").val()) {
				return {
					Name: li.find(".edtProcessName").val(),
					ElementName: li.find(".edtProcessElementName").val(),
					BindRecord: li.find(".chkProcessBindRecord").prop("checked"),
					TransPath: li.find(".selProcessTransPath").val(),
					TransQuery: li.find(".edtProcessTransQuery").val(),
					Visable: li.find(".edtProcessVisable").val(),
					WithSql: li.find(".chkProcessWithSql").prop("checked")
				}
			} else {
				return null;
			}
		}
		if (!processes || processes.length == 0) {
			$("#ulProcess").append(newProcess({}));
		} else {
			for (var i = 0; i < processes.length; i++)
				$("#ulProcess").append(newProcess(processes[i]));
		}

		function btnProcessUpClick() {
			var li = $(this).closest("li").prev();
			if (li) {
				li.before($(this).closest("li"));
			}
		}
		function btnProcessDownClick() {
			var li = $(this).closest("li").next();
			if (li) {
				li.after($(this).closest("li"));
			}
		}
		function btnProcessAddClick() {
			$(this).closest("li").after(newProcess({}));
		}
		function btnProcessRemoveClick() {
			var ul = $(this).closest("ul");
			if (ul.children("li").length == 1) {
				$(this).closest("li").find(":input").val(null);
				$(this).closest("li").find(":checkbox").prop("checked", false);
				$(this).closest("li").find(".select2").val(null).trigger("change");
			} else {
				$(this).closest("li").remove();
			}
		}
		function rebindProcessAllColumns() {
			$("#ulProcess .selProcessTransPath").each(function () {
				$(this).select2({
					data: _.pluck(AllColumns, "Name"),
					tags: true,
					tokenSeparators: [',', ' ']
				}).val($(this).data("trans-path")).trigger("change");
			});
		}

		function collectionProcesses() {
			return $("#ulProcess>li").map(function () {
				return collectionProcess($(this));
			}).get();
		}
		/*******************************************************/
		$("#recordview_param_setting").data("oncollection", function () {
			return JSON.stringify({
				DB: selDB.val(),
				TableName: selTable.val(),
				Sql: aceTrimTrailingSpace(edtSql),
				ManualPage: $("#chkManualPage").prop("checked"),
				UniqueField: selUniqueField.val(),
				Columns: collectionColumns(),
				Processes: collectionProcesses(),
				AllColumns: getColumnTypes()
			}, null, "\t");
		})
		/**********************************************************/
		$("#btnSample").click(function () {
			var tabName = selTable.val();
			edtSql.setValue('<<if eq "oci8" .Driver>>\n\
	<<if ge .Limit 0>>\n\
	SELECT * FROM(\n\
	<<end>>\n\
	  SELECT <<if .Columns>><<.Columns>><<else>>*<<end>>\n\
	  FROM '+ tabName + '\n\
	  <<if .Where>>WHERE <<.Where>><<end>>\n\
	  <<if .OrderBy>>ORDER BY <<.OrderBy>><<end>>\n\
	<<if ge .Limit 0>>\n\
	)WHERE ROWNUM<=<<.Limit>>\n\
	<<end>>\n\
<<else>>\n\
	SELECT <<if .Columns>><<.Columns>><<else>>*<<end>>\n\
	FROM  '+ tabName + '\n\
	<<if .Where>>WHERE <<.Where>><<end>>\n\
	<<if .OrderBy>>ORDER BY <<.OrderBy>><<end>>\n\
	<<if ge .Limit 0>>LIMIT <<.Limit>><<end>>\n\
<<end>>');
		});

	});

}